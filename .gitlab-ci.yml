# This file controls the GitLab CI pipeline for the `ShellLogger`
# project.  See here for the keyword reference:
# https://docs.gitlab.com/ee/ci/yaml/.


# Set up a global cache to pass information across stages.
cache: &global_cache
  key: "${CI_COMMIT_REF_SLUG}_${CI_COMMIT_SHORT_SHA}"
  paths:
    - doc/html/
    - tests/htmlcov/
    - shelllogger-env/
  policy: pull-push


# Set up the pipeline stages.
stages:
  - prepare
  - install
  - test
  - documentation
  - deploy
  - finish


# Run this before every job.
before_script:
  - |-
    export LSB_RELEASE=$(which lsb_release)
    if [ -x ${LSB_RELEASE} ]; then
        ${LSB_RELEASE} -a
    fi
  - |-
    if [ -d "shelllogger-env" ]; then
        conda activate $(pwd)/shelllogger-env
    else
        echo "Conda environment 'shelllogger-env' was not found."
        exit 1
    fi
    echo "-----"
    conda list
    echo "-----"


# Run this after every job.
after_script:
  - |-
    if [[ "${CONDA_PREFIX}" == "$(pwd)/shelllogger-env" ]]; then
        conda deactivate
    fi


#-----------------------------------------------------------------------
# Stage:  Prepare
#-----------------------------------------------------------------------


# Create the virtual environment, install the requirements, and save the
# environment to the cache.
requirements:
  stage: prepare
  timeout: 10m
  before_script:
    - conda create --prefix ./shelllogger-env --yes pip
  cache:
    <<: *global_cache
    when: on_success
  script:

    # Activate the virtual environment.
    - conda activate $(pwd)/shelllogger-env

    # Show the contents of the virtual environment.
    - conda list

    # Install required packages.
    - pip install
      -r requirements.txt
      -r tests/requirements.txt
      -r doc/requirements.txt

    # Show the contents of the virtual environment.
    - conda list


#-----------------------------------------------------------------------
# Stage:  Install
#-----------------------------------------------------------------------


# Test building a distribution.
wheel:
  stage: install
  needs: ["requirements"]
  timeout: 5m
  cache:
    <<: *global_cache
    policy: pull
  script:
    - pip wheel --no-deps -w dist .
  artifacts:
    name: "shelllogger-dist"
    paths:
      - dist/shelllogger*.whl
    expire_in: 6 weeks


# Test installation of the package.
install:
  stage: install
  needs: ["requirements"]
  timeout: 5m
  cache:
    <<: *global_cache
  script:

    # Install the package.
    - pip install .

    # Show the contents of the virtual environment to ensure it's there.
    - conda list


#-----------------------------------------------------------------------
# Stage:  Test
#-----------------------------------------------------------------------


# Execute the unit tests.
pytest:
  stage: test
  needs: ["requirements"]
  timeout: 5m
  cache:
    <<: *global_cache
  script:
    - python3 -m pytest
      --cov=src.shelllogger
      --cov-config=.coveragerc
      --cov-report=html
      --cov-report=term
      --cov-report=xml
      --full-trace
      tests/
  coverage: '/TOTAL\s*[0-9]*\s*[0-9]*\s*[0-9]*\s*[0-9]*\s*(\d+%)/'
  artifacts:
    paths:
      - tests/htmlcov
    reports:
      cobertura: tests/coverage.xml
      junit: tests/coverage.xml


# Ensure we adhere to PEP8.
flake8:
  stage: test
  needs: ["requirements"]
  timeout: 5m
  cache:
    <<: *global_cache
  script:
    - python3 -m flake8
      --exclude=shelllogger-venv


# Ensure the examples run without problems.
examples:
  stage: test
  needs: ["requirements", "install"]
  timeout: 5m
  cache:
    <<: *global_cache
    policy: pull
  script:
    - cd examples
    - python3 ./hello_world_html.py
    - python3 ./hello_world_html_and_console.py
    - python3 ./hello_world_html_with_stats.py
    - python3 ./build_flex.py
  artifacts:
    paths:
      - examples/log*


#-----------------------------------------------------------------------
# Stage:  Documentation
#-----------------------------------------------------------------------


# Generate the documentation.
sphinx:
  stage: documentation
  needs: ["requirements", "install"]
  timeout: 5m
  cache:
    <<: *global_cache
  script:
    - cd doc
    - bash make_html_docs.sh
  artifacts:
    paths:
      - doc/html


#-----------------------------------------------------------------------
# Stage:  Deploy
#-----------------------------------------------------------------------


# Publish coverage data and documentation (if on the main branch).
pages:
  stage: deploy
  needs: ["pytest", "sphinx"]
  timeout: 5m
  cache:
    <<: *global_cache
    policy: pull
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
  script:
    - mkdir -p public
    - mv tests/htmlcov public/.
    - mv doc/html/* public/.
  artifacts:
    paths:
      - public


#-----------------------------------------------------------------------
# Stage:  Finish
#-----------------------------------------------------------------------


# Test that uninstalling from a virtual environment works.
uninstall:
  stage: finish
  timeout: 5m
  cache:
    <<: *global_cache
  script:
    - pip uninstall -y shelllogger

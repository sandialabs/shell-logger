# This file controls the GitLab CI pipeline for the `ShellLogger`
# project.  See here for the keyword reference:
# https://docs.gitlab.com/ee/ci/yaml/.


# Set up the pipeline stages.
stages:
  - prepare
  - install
  - test
  - documentation
  - deploy
  - finish


# Run this before every job.
before_script:
  - |-
    export LSB_RELEASE=$(which lsb_release)
    if [ -x ${LSB_RELEASE} ]; then
        ${LSB_RELEASE} -a
    fi
  - |-
    if [ -d "shelllogger-venv" ]; then
        source shelllogger-venv/bin/activate
    else
        echo "Virtual Environment 'shelllogger-venv' was not found"
        exit 1
    fi
    echo "-----"
    echo "VIRTUAL_ENV = ${VIRTUAL_ENV:?}"
    echo "-----"


# Run this after every job.
after_script:
  - |-
    if [ ! -z ${VIRTUAL_ENV} ]; then
        deactivate
    fi


#-----------------------------------------------------------------------
# Stage:  Prepare
#-----------------------------------------------------------------------


# Create the virtual environment and install the requirements.
install requirements:
  stage: prepare
  timeout: 10m
  before_script:
    - python3 -m venv shelllogger-venv
  script:

    # Activate the virtual environment.
    - source shelllogger-venv/bin/activate

    # Ensure `pip` is up-to-date.
    - python3 -m pip install --upgrade pip

    # Remove `shelllogger` if it's been installed.
    - python3 -m pip uninstall -y shelllogger

    # Install required packages.
    - python3 -m pip install wheel
      -r requirements.txt
      -r tests/requirements.txt
      -r doc/requirements.txt
  artifacts:
    paths:
      - shelllogger-venv


#-----------------------------------------------------------------------
# Stage:  Install
#-----------------------------------------------------------------------


# Test building a distribution.
build distribution:
  stage: install
  needs: ["install requirements"]
  timeout: 5m
  script:
    - python3 -m pip wheel --no-deps -w dist .
  artifacts:
    paths:
      - dist/shelllogger*.whl
    expire_in: 6 weeks


# Test installation of the package.
install package:
  stage: install
  needs: ["install requirements"]
  timeout: 5m
  script:
    - python3 -m pip install .
  artifacts:
    paths:
      - shelllogger-venv


#-----------------------------------------------------------------------
# Stage:  Test
#-----------------------------------------------------------------------


# Execute the unit tests.
pytest:
  stage: test
  needs: ["install requirements"]
  timeout: 5m
  script:
    - python3 -m pytest
      --cov=src.shelllogger
      --cov-config=.coveragerc
      --cov-report=html
      --cov-report=term
      --cov-report=xml
      --full-trace
      tests/
  coverage: '/TOTAL\s*[0-9]*\s*[0-9]*\s*[0-9]*\s*[0-9]*\s*(\d+%)/'
  artifacts:
    paths:
      - tests/htmlcov
    reports:
      cobertura: tests/coverage.xml
      junit: tests/coverage.xml


# Ensure we adhere to PEP8.
flake8:
  stage: test
  needs: ["install requirements"]
  timeout: 5m
  script:
    - python3 -m flake8
      --exclude=shelllogger-venv


# Ensure the examples run without problems.
examples:
  stage: test
  needs: ["install requirements", "install package"]
  timeout: 5m
  script:
    - cd examples
    - python3 -m pip list
    - python3 ./hello_world_html.py
    - python3 ./hello_world_html_and_console.py
    - python3 ./hello_world_html_with_stats.py
    - python3 ./build_flex.py
  artifacts:
    paths:
      - examples/log*


#-----------------------------------------------------------------------
# Stage:  Documentation
#-----------------------------------------------------------------------


# Generate the documentation.
sphinx:
  stage: documentation
  needs: ["install requirements", "install package"]
  timeout: 5m
  script:
    - cd doc
    - bash make_html_docs.sh
  artifacts:
    paths:
      - doc/html


#-----------------------------------------------------------------------
# Stage:  Deploy
#-----------------------------------------------------------------------


# Publish coverage data and documentation (if on the main branch).
pages:
  stage: deploy
  needs: ["pytest", "sphinx"]
  timeout: 5m
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
  script:
    - mkdir -p public
    - mv tests/htmlcov public/.
    - mv doc/html/* public/.
  artifacts:
    paths:
      - public


#-----------------------------------------------------------------------
# Stage:  Finish
#-----------------------------------------------------------------------


# Test that uninstalling from a virtual environment works.
uninstall package:
  stage: finish
  timeout: 5m
  script:
    - python3 -m pip uninstall -y shelllogger
